{"ast":null,"code":"var _jsxFileName = \"/Users/murtadhoaaishah/Desktop/workspace/fs-open/part2/countries/src/App.jsx\";\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\n\nconst App = () => {\n  const [countries, setCountries] = useState([]);\n  const [query, setQuery] = useState('');\n  const [show, setShow] = useState({\n    display: false,\n    country: {}\n  });\n  const [weather, setWeather] = useState('');\n  useEffect(() => {\n    axios.get('https://restcountries.com/v3.1/all').then(response => {\n      setCountries(response.data);\n    });\n  }, []);\n  console.log(countries);\n  const api_key = process.env.REACT_APP_API_KEY; // console.log(api_key)\n  // key = '6b68316c60771c61ace4c744ea0ebff9'\n  // REACT_APP_API_KEY='6b68316c60771c61ace4c744ea0ebff9' npm start\n  // useEffect(() => {\n  // }\n  // )\n\n  const fetchWeather = country => {\n    console.log({\n      country\n    });\n    axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${country.name.common}&&appid=${api_key}`).then(response => {\n      setWeather(response.data);\n    });\n  };\n\n  console.log({\n    weather\n  });\n  useEffect(() => {\n    if (filteredCountries.length === 1) fetchWeather(filteredCountries[0]);\n  }, [query]);\n  const filteredCountries = query.trim() ? countries.filter(country => country.name.common.toLowerCase().includes(query.trim().toLowerCase())) : [];\n  const output = filteredCountries.length === 1 ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }\n  }, filteredCountries[0].name.common), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 7\n    }\n  }, \"capital \", filteredCountries[0].capital), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }\n  }, \"area \", filteredCountries[0].area), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }\n  }, \"npm start languages: \", Object.entries(filteredCountries[0].languages).map((languages, languageIndex) => /*#__PURE__*/React.createElement(\"li\", {\n    key: `language_${languageIndex}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 13\n    }\n  }, languages[1]))), /*#__PURE__*/React.createElement(\"img\", {\n    src: filteredCountries[0].flags.png,\n    alt: filteredCountries[0].name.common,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }, \"Weather in \", filteredCountries[0].name.common), weather && /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 19\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 9\n    }\n  }, \"temperature \", weather.main.temp))) : filteredCountries.length < 10 ? filteredCountries.map((country, countryIndex) => /*#__PURE__*/React.createElement(\"li\", {\n    key: `country_${countryIndex}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 9\n    }\n  }, country.name.common, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: () => setShow({ ...show,\n      display: !show.display,\n      country\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 66\n    }\n  }, \"show\"))) : /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 9\n    }\n  }, \"Too many matches, specify another filter\");\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 5\n    }\n  }, \"find countries \", /*#__PURE__*/React.createElement(\"input\", {\n    value: query,\n    onChange: e => setQuery(e.target.value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 22\n    }\n  }), show.display ? /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 11\n    }\n  }, show.country.name.common), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 11\n    }\n  }, \"capital \", show.country.capital), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 11\n    }\n  }, \"area \", show.country.area), /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 11\n    }\n  }, \"languages: \", Object.entries(show.country.languages).map((languages, languageIndex) => /*#__PURE__*/React.createElement(\"li\", {\n    key: `language_${languageIndex}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }\n  }, languages[1]))), /*#__PURE__*/React.createElement(\"img\", {\n    src: show.country.flags.png,\n    alt: show.country.name.common,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 11\n    }\n  })) : output);\n};\n\nexport default App;\n{\n  /* \n     import React, {useState, useEffect} from 'react'\n     import axios from 'axios'\n      const App = () =>\n     {\n         const [query, setQuery] = useState('')\n         const [countries, setCountries] = useState([])\n         const [show, setShow] = useState({ display: false, country: {} })\n         const [weather, setWeather] = useState('')\n  \n         useEffect(() => {\n           axios.get('https://restcountries.com/v3.1/all')     \n             .then(response => {\n               setCountries(response.data)\n             })\n         }, []) */\n}\n{\n  /* console.log(countries);`  \n          const api_key = process.env.REACT_APP_API_KEY\n          console.log(api_key)\n          console.log(weather)\n          console.log(query)\n         a4c7660005ab48ae0cc3802440d15423\n         REACT_APP_API_KEY='489d87d30f660d1275056a5bd92b5664' npm start */\n}\n{\n  /* const fetchWeather = (country) => {\n           axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${country.name.common}&appid=${api_key}`)\n             .then(response => {\n               setWeather(response.data)\n             })\n         }\n  \n  \n         console.log({ weather });\n          const filteredCountries = query.trim()\n           ? countries.filter(country => country.name.common.toLowerCase()\n             .includes(query.trim().toLowerCase()))\n           : countries\n          useEffect(() => {\n           if (filteredCountries.length === 1) {\n             fetchWeather(filteredCountries[0])\n           }\n         }, [query])\n  \n  \n         const output = filteredCountries.length === 1\n           ? (<div>\n             <h1>{filteredCountries[0].name.common}</h1>\n             <p>capital {filteredCountries[0].capital}</p>\n             <p>area {filteredCountries[0].area}</p>\n             <h3>{Object.entries(filteredCountries[0].languages).map((language, languageIndex) =>\n               <li key={`language_${languageIndex}`}>{language[1]}</li>\n             )}</h3>\n             <img src={filteredCountries[0].flags.png} alt={filteredCountries[0].name.common} />\n             <h1>Weather in {filteredCountries[0].name.common}</h1>\n             {weather && <div> <p>temperature -{weather.main.temp}</p>\n               <img src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\n               <p>wind {weather.wind.speed} m/s</p>\n             </div>}\n           </div>)\n           : filteredCountries.length < 10\n             ? filteredCountries.map((country, countryIndex) => <div key={`show_key${country.name.common}`}>{country.name.common}<button onClick={() => \n       { setShow({ ...show, display: !show.display, country }); fetchWeather(country) }}>show</button></div >)\n       : <p>Too many matches, specify another filter</p>\n  \n   return (\n     <div>\n       find countries  <input value={query}\n         onChange={e => setQuery(e.target.value)}\n       />\n       {show.display ? <div>\n         <h1>{show.country.name.common}</h1>\n         <p>capital {show.country.capital}</p>\n         <p>area {show.country.area}</p>\n         <h3>{Object.entries(show.country.languages).map((language, languageIndex) =>\n           <li key={`language_${languageIndex}`}>{language[1]}</li>\n         )}</h3>\n         <img src={show.country.flags.png} alt={show.country.name.common} />\n         {weather && <div> <p>temperature -{weather.main.temp}</p>\n           <img src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\n           <p>wind {weather.wind.speed} m/s</p>\n         </div>}\n       </div>\n         : output\n       }\n     </div>\n    )\n  }\n  export default App */\n}","map":{"version":3,"sources":["/Users/murtadhoaaishah/Desktop/workspace/fs-open/part2/countries/src/App.jsx"],"names":["React","useState","useEffect","axios","App","countries","setCountries","query","setQuery","show","setShow","display","country","weather","setWeather","get","then","response","data","console","log","api_key","process","env","REACT_APP_API_KEY","fetchWeather","name","common","filteredCountries","length","trim","filter","toLowerCase","includes","output","capital","area","Object","entries","languages","map","languageIndex","flags","png","main","temp","countryIndex","e","target","value"],"mappings":"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A;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAuCF,SAAS,CAAC,CAAD,CAAhD,CAFQ,CADd,CAJA,eASA;AAAK,IAAA,GAAG,EAAE9B,IAAI,CAACG,OAAL,CAAa8B,KAAb,CAAmBC,GAA7B;AAAkC,IAAA,GAAG,EAAElC,IAAI,CAACG,OAAL,CAAac,IAAb,CAAkBC,MAAzD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATA,CADH,GAaGO,MAjBN,CADF;AAqBD,CAlGD;;AAoGA,eAAe9B,GAAf;AAwBA;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEkB;AAClB;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AAE0E;AAE1E;AAAC;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQsB","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\n\nconst App = () => {\n  const [countries, setCountries] = useState([])\n  const [query, setQuery] = useState('')\n  const [show, setShow] = useState({ display: false, country: {} })\n  const [weather, setWeather] = useState('')\n\n\n  useEffect(() => {\n    axios.get('https://restcountries.com/v3.1/all')\n      .then(response => {\n        setCountries(response.data)\n      })\n  }, [])\n  console.log(countries);\n\n\n\n  const api_key = process.env.REACT_APP_API_KEY\n  // console.log(api_key)\n  // key = '6b68316c60771c61ace4c744ea0ebff9'\n\n  // REACT_APP_API_KEY='6b68316c60771c61ace4c744ea0ebff9' npm start\n\n  // useEffect(() => {\n\n  // }\n  // )\n\n\n  const fetchWeather = (country) => {\n    console.log({ country })\n    axios.get(`http://api.openweathermap.org/data/2.5/weather?q=${country.name.common}&&appid=${api_key}`)\n      .then(response => {\n        setWeather(response.data)\n      })\n  }\n  console.log({ weather });\n\n  useEffect(() => {\n    if (filteredCountries.length === 1)\n      fetchWeather(filteredCountries[0])\n  }, [query])\n\n\n  const filteredCountries = query.trim()\n    ? countries.filter(country => country.name.common.toLowerCase()\n      .includes(query.trim().toLowerCase()))\n    : []\n\n\n  const output = filteredCountries.length === 1\n    ? <div>\n      <h1>{filteredCountries[0].name.common}</h1>\n      <p>capital {filteredCountries[0].capital}</p>\n      <p>area {filteredCountries[0].area}</p>\n      <h3>npm start\n        languages: {Object.entries(filteredCountries[0].languages)\n          .map((languages, languageIndex) =>\n            <li key={`language_${languageIndex}`}>{languages[1]}</li>)}\n      </h3>\n      <img src={filteredCountries[0].flags.png} alt={filteredCountries[0].name.common} />\n      <h2>Weather in {filteredCountries[0].name.common}</h2>\n      {weather && <div>\n        <p>temperature {weather.main.temp}</p>\n        {/* <img src=`http://api.openweathermap.org/data/2.5/weather?q=${ }` alt=\"\" /> */}\n      </div>}\n    </div>\n\n    : filteredCountries.length < 10\n      ? filteredCountries.map((country, countryIndex) =>\n        <li key={`country_${countryIndex}`}>{country.name.common}<button\n          onClick={() => setShow({ ...show, display: !show.display, country })}>show</button></li>\n      )\n      : <p>Too many matches, specify another filter</p>\n\n\n\n  return (\n    <div>\n      find countries <input value={query}\n        onChange={e => setQuery(e.target.value)} />\n\n      {show.display\n        ? <div>\n          <h1>{show.country.name.common}</h1>\n          <p>capital {show.country.capital}</p>\n          <p>area {show.country.area}</p>\n          <h3>\n            languages: {Object.entries(show.country.languages)\n              .map((languages, languageIndex) =>\n                <li key={`language_${languageIndex}`}>{languages[1]}</li>)}\n          </h3>\n          <img src={show.country.flags.png} alt={show.country.name.common} />\n        </div>\n\n        : output}\n    </div>\n  )\n}\n\nexport default App\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{/* \n    import React, {useState, useEffect} from 'react'\n    import axios from 'axios'\n\n    const App = () =>\n    {\n        const [query, setQuery] = useState('')\n        const [countries, setCountries] = useState([])\n        const [show, setShow] = useState({ display: false, country: {} })\n        const [weather, setWeather] = useState('')\n\n\n        useEffect(() => {\n          axios.get('https://restcountries.com/v3.1/all')     \n            .then(response => {\n              setCountries(response.data)\n            })\n        }, []) */}\n{/* console.log(countries);`  \n\n        const api_key = process.env.REACT_APP_API_KEY\n         console.log(api_key)\n\n        console.log(weather)\n         console.log(query)\n        a4c7660005ab48ae0cc3802440d15423\n        REACT_APP_API_KEY='489d87d30f660d1275056a5bd92b5664' npm start */}\n\n{/* const fetchWeather = (country) => {\n          axios.get(`https://api.openweathermap.org/data/2.5/weather?q=${country.name.common}&appid=${api_key}`)\n            .then(response => {\n              setWeather(response.data)\n            })\n        }\n\n\n\n\n        console.log({ weather });\n\n        const filteredCountries = query.trim()\n          ? countries.filter(country => country.name.common.toLowerCase()\n            .includes(query.trim().toLowerCase()))\n          : countries\n\n        useEffect(() => {\n          if (filteredCountries.length === 1) {\n            fetchWeather(filteredCountries[0])\n          }\n        }, [query])\n\n\n\n\n        const output = filteredCountries.length === 1\n          ? (<div>\n            <h1>{filteredCountries[0].name.common}</h1>\n            <p>capital {filteredCountries[0].capital}</p>\n            <p>area {filteredCountries[0].area}</p>\n            <h3>{Object.entries(filteredCountries[0].languages).map((language, languageIndex) =>\n              <li key={`language_${languageIndex}`}>{language[1]}</li>\n            )}</h3>\n            <img src={filteredCountries[0].flags.png} alt={filteredCountries[0].name.common} />\n            <h1>Weather in {filteredCountries[0].name.common}</h1>\n            {weather && <div> <p>temperature -{weather.main.temp}</p>\n              <img src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\n              <p>wind {weather.wind.speed} m/s</p>\n            </div>}\n          </div>)\n          : filteredCountries.length < 10\n            ? filteredCountries.map((country, countryIndex) => <div key={`show_key${country.name.common}`}>{country.name.common}<button onClick={() => \n      { setShow({ ...show, display: !show.display, country }); fetchWeather(country) }}>show</button></div >)\n      : <p>Too many matches, specify another filter</p>\n\n\n  return (\n    <div>\n      find countries  <input value={query}\n        onChange={e => setQuery(e.target.value)}\n      />\n      {show.display ? <div>\n        <h1>{show.country.name.common}</h1>\n        <p>capital {show.country.capital}</p>\n        <p>area {show.country.area}</p>\n        <h3>{Object.entries(show.country.languages).map((language, languageIndex) =>\n          <li key={`language_${languageIndex}`}>{language[1]}</li>\n        )}</h3>\n        <img src={show.country.flags.png} alt={show.country.name.common} />\n        {weather && <div> <p>temperature -{weather.main.temp}</p>\n          <img src={`https://openweathermap.org/img/wn/${weather.weather[0].icon}@2x.png`} />\n          <p>wind {weather.wind.speed} m/s</p>\n        </div>}\n      </div>\n        : output\n      }\n    </div>\n\n  )\n}\nexport default App */}"]},"metadata":{},"sourceType":"module"}